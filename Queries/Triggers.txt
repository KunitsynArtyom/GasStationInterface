drop trigger InitializeStation on "AZS"."GasStation";
drop trigger CheckDeal on "AZS"."Deal";
drop trigger CheckUpdateDeal on "AZS"."Deal";
drop trigger CheckSupply on "AZS"."Supply";



CREATE OR REPLACE FUNCTION InitializeStation() RETURNS TRIGGER
AS $$
DECLARE

account_station_id int;
fuelamount int;
	
BEGIN
account_station_id = NEW.station_id;
fuelamount = NEW.StorageCap/3;

INSERT INTO "AZS"."Accounting" (Station_id, AccountRole, FuelAccountType, FuelAccountAmount, AccountDate)
VALUES (account_station_id, 'Инициализация станции', 'A92', fuelamount, now()),
(account_station_id,'Инициализация станции', 'A95', fuelamount, now()),
(account_station_id,'Инициализация станции', 'A95+', fuelamount, now())
;
RETURN NEW;

END;
$$ LANGUAGE plpgSQL;

CREATE TRIGGER InitializeStation
AFTER INSERT ON "AZS"."GasStation"
FOR EACH ROW EXECUTE PROCEDURE InitializeStation();


CREATE OR REPLACE FUNCTION CheckDeal() RETURNS TRIGGER
AS $$
DECLARE

d_staff_id int;
d_station_id int;
d_fueltype char(30);
d_fuelamount int;
d_dealdate timestamp without time zone;
a_fuelamount int;
	
BEGIN

d_staff_id = NEW.staff_id;
d_fueltype = NEW.fueltype;
d_fuelamount = NEW.fuelamount;
d_dealdate = NEW.dealdate;

SELECT station_id INTO d_station_id
FROM "AZS"."Staff"
WHERE staff_id = d_staff_id
;

SELECT fuelaccountamount INTO a_fuelamount
FROM "AZS"."Accounting"
WHERE  fuelaccounttype=d_fueltype 
AND accountdate IN
		  (SELECT MAX(accountdate)
		   FROM "AZS"."Accounting"
		   WHERE station_id = d_station_id AND fuelaccounttype=d_fueltype
		  );
		  
IF(a_fuelamount >= d_fuelamount) THEN

a_fuelamount = a_fuelamount - d_fuelamount;

INSERT INTO "AZS"."Accounting" (Station_id, AccountRole, FuelAccountType, FuelAccountAmount, AccountDate)
VALUES (d_station_id, 'Продажа', d_fueltype, a_fuelamount, d_dealdate)
;

RETURN NEW;
ELSE

RAISE EXCEPTION 'Невозможно выполнить! Для проведения сделки в резервуарах не хватает топлива!'; 

END IF;
END;
$$ LANGUAGE plpgSQL;

CREATE TRIGGER CheckDeal
BEFORE INSERT ON "AZS"."Deal"
FOR EACH ROW EXECUTE PROCEDURE CheckDeal();



CREATE OR REPLACE FUNCTION CheckUpdateDeal() RETURNS TRIGGER
AS $$
DECLARE

d_staff_id int;
d_station_id int;
d_fueltype char(30);
d_fuelamount int;
d_dealdate timestamp without time zone;
a_fuelamount int;
d_prevamount int;
a_lastaccountdate timestamp without time zone;
station_adres char(100);
amountdifference int;
maxfuelamount int;
	
BEGIN

d_prevamount = OLD.fuelamount;
d_staff_id = NEW.staff_id;
d_fueltype = NEW.fueltype;
d_fuelamount = NEW.fuelamount;
d_dealdate = NEW.dealdate;

SELECT station_id INTO d_station_id
FROM "AZS"."Staff"
WHERE staff_id = d_staff_id
;

SELECT storagecap/3 INTO maxfuelamount
FROM "AZS"."GasStation"
WHERE station_id = d_station_id
;

SELECT MAX(accountdate) INTO a_lastaccountdate
FROM "AZS"."Accounting"
WHERE station_id = d_station_id 
AND fuelaccounttype = d_fueltype
;

SELECT fuelaccountamount INTO a_fuelamount
FROM "AZS"."Accounting"
WHERE station_id = d_station_id 
AND accountdate = a_lastaccountdate
AND fuelaccounttype = d_fueltype
;

IF(d_prevamount > d_fuelamount) THEN

amountdifference = d_prevamount - d_fuelamount;

IF(a_fuelamount + amountdifference < maxfuelamount) THEN

INSERT INTO "AZS"."Accounting" (Station_id, Station_Adres, AccountRole, FuelAccountType, FuelAccountAmount, AccountDate)
VALUES (d_station_id, 'Правка продажи', d_fueltype, a_fuelamount + amountdifference, now())
;

RETURN NEW;

ELSE 

INSERT INTO "AZS"."Accounting" (Station_id, Station_Adres, AccountRole, FuelAccountType, FuelAccountAmount, AccountDate)
VALUES (d_station_id, 'Правка продажи', d_fueltype, maxfuelamount, now())
;

RETURN NEW;

END IF;


ELSE

amountdifference = d_fuelamount - d_prevamount;

IF(a_fuelamount - amountdifference > 0) THEN

INSERT INTO "AZS"."Accounting" (Station_id, AccountRole, FuelAccountType, FuelAccountAmount, AccountDate)
VALUES (d_station_id, 'Правка продажи', d_fueltype, a_fuelamount - amountdifference, now())
;

RETURN NEW;

ELSE 

RAISE EXCEPTION 'Для проведения данной операции в цистернах не хватает топлива!';
END IF;

RETURN NEW;
END IF;

END;
$$ LANGUAGE plpgSQL;

CREATE TRIGGER CheckUpdateDeal
BEFORE UPDATE ON "AZS"."Deal"
FOR EACH ROW EXECUTE PROCEDURE CheckUpdateDeal();



CREATE OR REPLACE FUNCTION CheckSupply() RETURNS TRIGGER
AS $$
DECLARE

s_staff_id int;
s_station_id int;
s_fuelsupplytype char(30);
s_fuelsupplyamount int;
s_supplydate timestamp without time zone;
a_fuelamount int;
station_adres char(100);
needamount int;
maxfuelamount int;
	
BEGIN

s_station_id = NEW.station_id;
s_staff_id = NEW.staff_id;
s_fuelsupplytype = NEW.fuelsupplytype;
s_fuelsupplyamount = NEW.fuelsupplyamount;
s_supplydate = NEW.supplydate;

SELECT storagecap/3 INTO maxfuelamount
FROM "AZS"."GasStation"
WHERE station_id = s_station_id
;

SELECT fuelaccountamount INTO a_fuelamount
FROM "AZS"."Accounting"
WHERE  fuelaccounttype=s_fuelsupplytype
AND accountdate IN
		  (SELECT MAX(accountdate)
		   FROM "AZS"."Accounting"
		   WHERE station_id = s_station_id AND fuelaccounttype=s_fuelsupplytype
		  );
		  
IF(s_fuelsupplyamount + a_fuelamount > maxfuelamount) THEN


RAISE EXCEPTION 'Невозможно выполнить! Будет совершено переполнение резервуаров!';


ELSE

INSERT INTO "AZS"."Accounting" (Station_id, AccountRole, FuelAccountType, FuelAccountAmount, AccountDate)
VALUES (s_station_id, 'Подвоз', s_fuelsupplytype, s_fuelsupplyamount + a_fuelamount, s_supplydate)
;

RETURN NEW;

END IF;
RETURN NEW;
END;
$$ LANGUAGE plpgSQL;

CREATE TRIGGER CheckSupply
BEFORE INSERT ON "AZS"."Supply"
FOR EACH ROW EXECUTE PROCEDURE CheckSupply();